pipeline {

    agent none

    environment {
        CI = 'true'
    }
    stages {

       stage('build') {

        parallel {

        stage('Build Docker Images') {

                    agent {
                        label 'linux'
                    }

                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                            sh label: 'docker-build', script: 'cd /home/jenkins/go/src/infini.sh/loadgen/ && make build && chmod a+x bin/loadgen'
                            sh label: 'docker-build', script: 'cd /home/jenkins/go/src/infini.sh/loadgen/bin && docker build -t infini-loadgen  -f ../docker/Dockerfile .'
                            sh label: 'docker-tagging', script: 'docker tag infini-loadgen infinilabs/loadgen:latest && docker tag infini-loadgen infinilabs/loadgen:$VERSION-$BUILD_NUMBER'
                            sh label: 'docker-push', script: 'docker push infinilabs/loadgen:$VERSION-$BUILD_NUMBER && docker push infinilabs/loadgen:latest'
                        }
                    }
                }
    } }
    }
}
